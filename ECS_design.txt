using Entity = uint32_t;
using Component = uint32_t;

class World {
    public:
        template<typename ComponentType>
        void AddComponent(Entity e, ComponentType c);


        template<typename ComponentType>
        void RemoveComponent(Entity e);

    private:
        template<typename ComponentType>
        ComponentManager<ComponentType> GetComponentManager<ComponentType>();
}

class EntityManager {
    public:
        Entity CreateEntity();
        void DestroyEntity(Entity entity);

    private:
        int m_LastEntity = 0;
};

template <typename ComponentType>
class ComponentManager<ComponentType> {
    public:
        Component AddComponent(Entity e);
        void RemoveComponent(Entity e);

        ComponentType Lookup(Entity e); 
    private:
        struct ComponentData {
            uint32_t size = 1;
            std::array<ComponentType, 1024> data;
        }
        
        ComponentData m_Data;
        std::map<Entity, Component> m_EntityMap;
}

template<typename ComponentType>
struct ComponentHandle {
    Entity owner;
    ComponentType *component;
    ComponentManager<ComponentType> *mgr;
  
    ComponentHandle(ComponentManager<ComponentType> *manager, Component inst, Entity e);
    void Destroy();
}

struct EntityHandler {
    Entity entity;
    World *world;
        
    void Remove();

    template<typename ComponentType>
    void AddComponent(ComponentType c);

    template<typename ComponentType>
    void RemoveComponent();
}

class System {
    public:
      virtual void Init() {};
    
      virtual void Update(int dt) {};
   
      virtual void Render() {};
      
      void RegisterWorld(World * world);

      void RegisterEntity(Entity entity);

      void DeRegisterEntity(Entity entity);

    private:
      std::bitset<32> s_SystemSignature;
    
      std::vector<Entity> m_RegisteredEntities;
    
      World *m_ParentWorld;
}

